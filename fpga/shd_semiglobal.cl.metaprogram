<%
#define BASE_SIZE 2

void inline_ap_uint_512_get_bit(const char* x, int bit)
{
	int wordidx = bit >> 5; // int wordidx = bit / 32;
	int bitidx = bit & 0x1F; // int bitidx = (bit % 32);

	printf("((%s.w%d >> %d)&1)", x, wordidx, bitidx);
}

void inline_ap_uint_512_get_bit_or_one(const char* x, int bit)
{
	if (bit >= 512 || bit < 0)
		printf("1");
	else
		inline_ap_uint_512_get_bit(x, bit);
}

void inline_ap_uint_1024_get_bit(const char* x, int bit)
{
	int wordidx = bit >> 5; // int wordidx = bit / 32;
	int bitidx = bit & 0x1F; // int bitidx = (bit % 32);

	printf("((%s.w%d >> %d)&1)", x, wordidx, bitidx);
}

void inline_ap_uint_1024_get_bit_or_one(const char* x, int bit)
{
	if (bit >= 1024 || bit < 0)
		printf("1");
	else
		inline_ap_uint_512_get_bit(x, bit);
}

%>
#include "../adapter_semiglobal.cl"



void xorBases(ap_uint_512 p, ap_uint_512 t, ap_uint_512p r)
{
<%
for (int i=0; i < 512/BASE_SIZE; i++)
{
	int dstidx = 512 - 1 -i;
	int srcidx0 = 512 - 1 -i*2;
	int srcidx1 = 512 - 2 -i*2;

	printf("\tint dst_%d = (", dstidx);
	inline_ap_uint_512_get_bit("p", srcidx0);
	printf(" ^ ");
	inline_ap_uint_512_get_bit("t", srcidx0);
	printf(") | (");
	inline_ap_uint_512_get_bit("p", srcidx1);
	printf(" ^ ");
	inline_ap_uint_512_get_bit("t", srcidx1);
	printf(") ;\n");

}

for (int i=0; i < (512/BASE_SIZE)/32; i++)
{
	int wordidx = 512/32 - 1 -i;
	printf("r->w%d = ", wordidx);

	for (int k=0; k < 32; k++)
	{
		int ref = wordidx * 32 + k;
		if (k>0) printf("|");
		printf("(dst_%d<<%d)", ref, k);
	}

	printf(";\n");
}
%>
}


void removeShortZeros(ap_uint_512 x, ap_uint_512p r)
{
<%
for (int i=0; i < 512/BASE_SIZE; i++)
{
	int idx = 512 - 1 -i;

	printf("\tint dst_%d = ", idx);
	inline_ap_uint_512_get_bit_or_one("x", idx);
	printf(" | (");
	inline_ap_uint_512_get_bit_or_one("x", idx+1);
	printf(" & ");
	inline_ap_uint_512_get_bit_or_one("x", idx-1);
	printf(") | (");
	inline_ap_uint_512_get_bit_or_one("x", idx+2);
	printf(" & ");
	inline_ap_uint_512_get_bit_or_one("x", idx-1);
	printf(") | (");
	inline_ap_uint_512_get_bit_or_one("x", idx+1);
	printf(" & ");
	inline_ap_uint_512_get_bit_or_one("x", idx-2);
	printf(");\n");


 // p1 & m1) | (p2 & m1) | (p1 & m2);\n", idx);
}

for (int i=0; i < (512/BASE_SIZE)/32; i++)
{
	int wordidx = 512/32 - 1 -i;
	printf("r->w%d = ", wordidx);

	for (int k=0; k < 32; k++)
	{
		int ref = wordidx * 32 + k;
		if (k>0) printf("|");
		printf("(dst_%d<<%d)", ref, k);
	}

	printf(";\n");
}
%>
	
}


unsigned int shd(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	ap_uint_512 acum;
	ap_uint_512_onesHigh(AP_UINT_PTR(acum), plen);

#ifdef FPGA_DEBUG
	for (int i=-SHD_THRESHOLD; i <= SHD_THRESHOLD; i++)
	{
		ap_uint_512 shifted_pattern;
		if (i < 0)
		{
			ap_uint_512_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_512_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_512_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}

		printf("shift [%2d] =", i);
		printSequence(shifted_pattern, plen);
		printf("\n");
	}
#endif

	#pragma unroll
	for (int i=-SHD_THRESHOLD; i <= SHD_THRESHOLD; i++)
	{
		ap_uint_512 shifted_pattern;
		if (i < 0)
		{
			ap_uint_512_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_512_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_512_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		ap_uint_512 dist2;
		ap_uint_512 dist;
			
		//xorBases(shifted_pattern, text, AP_UINT_PTR(dist));
		xorBases(shifted_pattern, text, AP_UINT_PTR(dist2));
		removeShortZeros(dist2, AP_UINT_PTR(dist));

#ifdef FPGA_DEBUG
		printf("shift [%2d] =", i);
		ap_uint_512_printBinHigh(dist, plen);
		printf("\n");
#endif

		ap_uint_512_and_self(AP_UINT_PTR(acum), dist);

#ifdef FPGA_DEBUG

		printf("acum       =");
		ap_uint_512_printBinHigh(acum, plen);
		printf("\n");
#endif
	}

	return ap_uint_512_pop_count(acum);
}



unsigned int computeDistance(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	return shd(pattern,  plen, text,  plen);
}



