<%
#define BASE_SIZE 2

#include <math.h>

int max(int a, int b)
{
	if (a > b) 
		return a; 
	else
		return b;
}

int abs(int a)
{
	if (a < 0) return -a;
	else return a;
}

void inline_ap_uint_512_get_bit(const char* x, int bit)
{
	int wordidx = bit >> 5; // int wordidx = bit / 32;
	int bitidx = bit & 0x1F; // int bitidx = (bit % 32);

	printf("((%s.w%d >> %d)&1)", x, wordidx, bitidx);
}

void inline_ap_uint_512_get_bit_or_one(const char* x, int bit)
{
	if (bit >= 512 || bit < 0)
		printf("1");
	else
		inline_ap_uint_512_get_bit(x, bit);
}



void inlineEqualBases(const char* p, int i, const char* t,  int j)
{

	int srcidx0 = 512 - 1 -i*2;
	int srcidx1 = 512 - 2 -i*2;

	int srcjdx0 = 512 - 1 -j*2;
	int srcjdx1 = 512 - 2 -j*2;

	printf(" (" );
	inline_ap_uint_512_get_bit(p, srcidx0);
	printf(" ^ ");
	inline_ap_uint_512_get_bit(t, srcjdx0);
	printf(") | (");
	inline_ap_uint_512_get_bit(p, srcidx1);
	printf(" ^ ");
	inline_ap_uint_512_get_bit(t, srcjdx1);
	printf(")");

}

%>
#include "../adapter.cl"

#pragma OPENCL EXTENSION cl_intel_arbitrary_precision_integers : enable

<%
int LEV_THRESHOLD_BITS = ceil(log(LEV_THRESHOLD) / log(2));


%>

ap_uint< <%printf("%d", LEV_THRESHOLD_BITS+1);%> > satAdd(ap_uint< <%printf("%d", LEV_THRESHOLD_BITS+1);%> > a, ap_uint< <%printf("%d", LEV_THRESHOLD_BITS+1);%> > b)
{
	// bits
	int lev_bits = <%printf("%d", LEV_THRESHOLD_BITS);%>;
	int mask = 1 << lev_bits;
	int isASaturated = (a >> lev_bits) & 1;
	if (isASaturated)
		return mask;
	else
		return a + b;
}


unsigned int lev(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	//int d = 0;

<%
	for (int i = 0; i <= max(PATTERN_LEN, TEXT_LEN); i++)
	{
		for (int xinc = 0; xinc <= LEV_THRESHOLD; xinc++)
		{
			int y = i;
			int x = i + xinc;
			printf("\tint eq_%d_%d = ", x, y);
			if (x > 0 && y > 0)
				inlineEqualBases("text", x-1, "pattern", y-1);
			else
				printf("0");
			printf(";\n");

			if (x <= LEV_THRESHOLD)
			{
				printf("\tap_uint< %d > d_%d_%d = %d;\n", LEV_THRESHOLD_BITS+1, x, y, x);
				
			}
			else
				printf("\tap_uint< %d > d_%d_%d = %d;\n", LEV_THRESHOLD_BITS+1, x, y, LEV_THRESHOLD+1);

			if (x > 0) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , 1));\n", x, y, x, y, x-1, y);
			if (y > 0 && xinc < LEV_THRESHOLD-1) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , 1));\n", x, y, x, y, x, y-1);
			if ((x>0) && (y>0)) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , eq_%d_%d));\n", x, y, x, y, x-1, y-1, x, y);

		}
	
		for (int yinc = 1; yinc <= LEV_THRESHOLD; yinc++)
		{
			int y = i + yinc;
			int x = i;
			printf("int eq_%d_%d = ", x, y);
			if (x > 0 && y > 0)
				inlineEqualBases("text", x-1, "pattern", y-1);
			else
				printf("0");
			printf(";\n");

			if (y <= LEV_THRESHOLD)
			{
				printf("\tap_uint< %d > d_%d_%d = %d;\n", LEV_THRESHOLD_BITS+1, x, y, y);
				
			}
			else
				printf("\tap_uint< %d > d_%d_%d = %d;\n", LEV_THRESHOLD_BITS+1, x, y, LEV_THRESHOLD+1);

			if (x > 0 && yinc < LEV_THRESHOLD-1) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , 1));\n", x, y, x, y, x-1, y);
			if (y > 0) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , 1));\n", x, y, x, y, x, y-1);
			if ((x>0) && (y>0)) printf("\td_%d_%d = min(d_%d_%d, satAdd(d_%d_%d , eq_%d_%d));\n", x, y, x, y, x-1, y-1, x, y);

		}
	}%>	

	return d_<%printf("%d", TEXT_LEN);%>_<%printf("%d", PATTERN_LEN);%>;
	
}



unsigned int computeDistance(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	return lev(pattern,  plen, text,  plen);
}





