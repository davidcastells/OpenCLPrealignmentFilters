<%
#define BASE_SIZE 2


void inline_ap_uint_512_get_bit(const char* x, int bit)
{
	int wordidx = bit >> 5; // int wordidx = bit / 32;
	int bitidx = bit & 0x1F; // int bitidx = (bit % 32);

	printf("((%s.w%d >> %d)&1)", x, wordidx, bitidx);
}

void inline_ap_uint_512_get_bit_or_one(const char* x, int bit)
{
	if (bit >= 512 || bit < 0)
		printf("1");
	else
		inline_ap_uint_512_get_bit(x, bit);
}

void inline_ap_uint_1024_get_bit(const char* x, int bit)
{
	int wordidx = bit >> 5; // int wordidx = bit / 32;
	int bitidx = bit & 0x1F; // int bitidx = (bit % 32);

	printf("((%s.w%d >> %d)&1)", x, wordidx, bitidx);
}

void inline_ap_uint_1024_get_bit_or_one(const char* x, int bit)
{
	if (bit >= 1024 || bit < 0)
		printf("1");
	else
		inline_ap_uint_512_get_bit(x, bit);
}

int plen = PATTERN_LEN;

%>

#include "../adapter.cl"


#ifndef SHOUJI_WINDOW_SIZE
#define SHOUJI_WINDOW_SIZE	4
#endif

<%
#ifndef SHOUJI_WINDOW_SIZE
#define SHOUJI_WINDOW_SIZE	4
#endif
%>


unsigned int countZeros(unsigned int xpart, int size);

<%
#ifdef ENTRY_TYPE_2
%>


void xorBases(ap_uint_1024 p, ap_uint_1024 t, ap_uint_1024p r)
{
<%
for (int i=0; i < 1024/BASE_SIZE; i++)
{
	int dstidx = 1024 - 1 -i;
	int srcidx0 = 1024 - 1 -i*2;
	int srcidx1 = 1024 - 2 -i*2;

	printf("\tint dst_%d = (", dstidx);
	inline_ap_uint_1024_get_bit("p", srcidx0);
	printf(" ^ ");
	inline_ap_uint_1024_get_bit("t", srcidx0);
	printf(") | (");
	inline_ap_uint_1024_get_bit("p", srcidx1);
	printf(" ^ ");
	inline_ap_uint_1024_get_bit("t", srcidx1);
	printf(") ;\n");

}

for (int i=0; i < (1024/BASE_SIZE)/32; i++)
{
	int wordidx = 1024/32 - 1 -i;
	printf("r->w%d = ", wordidx);

	for (int k=0; k < 32; k++)
	{
		int ref = wordidx * 32 + k;
		if (k>0) printf("|");
		printf("(dst_%d<<%d)", ref, k);
	}

	printf(";\n");
}
%>
}

unsigned int shouji(ap_uint_1024 pattern,  int plen, ap_uint_1024 text,  int tlen)
{
	ap_uint_1024 acum;
	ap_uint_1024_zero(AP_UINT_PTR(acum));

#ifdef FPGA_DEBUG
	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		ap_uint_1024 shifted_pattern;
		if (i < 0)
		{
			ap_uint_1024_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_1024_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_1024_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}

		printf("shift [%2d] =", i);
		printSequence(shifted_pattern, plen);
		printf("\n");
	}


	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		ap_uint_1024 shifted_pattern;
		if (i < 0)
		{
			ap_uint_1024_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_1024_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_1024_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}

		printf("shift [%2d] =", i);
		ap_uint_1024_printBinHigh(shifted_pattern, plen);
		printf("\n");

	}
#endif


<%
	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		if (i < 0)
		{
			char* shifted_pattern_prefix = "shifted_pattern_m"; 
			char* dist_prefix = "dist_m"; 
%>
	ap_uint_1024 <%printf("%s%d", shifted_pattern_prefix, -i);%>;
	ap_uint_1024 <%printf("%s%d", dist_prefix, -i);%>;

	ap_uint_1024_shift_left(pattern, (<%printf("%d",-i);%>)*BASE_SIZE, AP_UINT_PTR(<%printf("%s%d", shifted_pattern_prefix, -i);%>));
	xorBases(<%printf("%s%d", shifted_pattern_prefix, -i);%>, text, AP_UINT_PTR(<%printf("%s%d", dist_prefix, -i);%>));
			
<%		}
		else if (i==0)
		{
			char* shifted_pattern_prefix = "shifted_pattern_";
			char* dist_prefix = "dist_"; 
%>
	ap_uint_1024 shifted_pattern_0;
	ap_uint_1024 dist_0;

	ap_uint_1024_set(AP_UINT_PTR(shifted_pattern_0), pattern);
	xorBases(shifted_pattern_0, text, AP_UINT_PTR(dist_0));
				
<%		}
		else
		{
			char* shifted_pattern_prefix = "shifted_pattern_p";
			char* dist_prefix = "dist_p"; 
%>
	ap_uint_1024 <%printf("%s%d", shifted_pattern_prefix, i);%>;
	ap_uint_1024 <%printf("%s%d", dist_prefix, i);%>;

	ap_uint_1024_shift_right(pattern, <%printf("%d",i);%>*BASE_SIZE, AP_UINT_PTR(<%printf("%s%d", shifted_pattern_prefix, i);%>));
	xorBases(<%printf("%s%d", shifted_pattern_prefix, i);%>, text, AP_UINT_PTR(<%printf("%s%d", dist_prefix, i);%>));
				
<%		}
	}
%>




	<%
	for (int k=0; k < plen - SHOUJI_WINDOW_SIZE ; k++)
	//for (int k=0; k < 1024/2 ; k++)
	{
	%>
	{
		unsigned int maxz = 0;
		int cb = 1;<%
		for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++){
		%>
		{<%
			

			if (i < 0)
			{
				char* shifted_pattern_prefix = "shifted_pattern_m"; 
				char* dist_prefix = "dist_m"; 
			%>
			unsigned int xpart = ap_uint_1024_range_high_32(<%printf("%s%d", dist_prefix, -i);%>, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE); <%}
			else if (i==0)
			{
				char* shifted_pattern_prefix = "shifted_pattern_";
				char* dist_prefix = "dist_"; 
			%>
			unsigned int xpart = ap_uint_1024_range_high_32(dist_0, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE);<%}
			else
			{
				char* shifted_pattern_prefix = "shifted_pattern_p";
				char* dist_prefix = "dist_p"; 
			%>
			unsigned int xpart = ap_uint_1024_range_high_32(<%printf("%s%d", dist_prefix, i);%>, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE);<%}	

#ifdef FPGA_DEBUG
			printf("shift [%2d] =", i);
			ap_uint_1024_printBinHigh(dist, plen);
			printf("\n");

			printf("xpart (%d << %d) ", < % printf("%d",k); % >, i);
			printWordBin(xpart, SHOUJI_WINDOW_SIZE);
			printf("\n");
#endif

	%>
			unsigned int cz = countZeros(xpart, SHOUJI_WINDOW_SIZE); 
			int xpart_hb = (xpart >> (SHOUJI_WINDOW_SIZE-1)) & 0x1;

			if ((cz > maxz) || (cz == maxz && (xpart_hb==0)))
			{
				maxz = cz;
				cb = xpart_hb;
			}
		}
		<%}%>

		ap_uint_1024_or_high_bit(AP_UINT_PTR(acum), <%printf("%d",k);%>, cb);
	}<%}%>

#ifdef FPGA_DEBUG
	printf("acum       =");
	ap_uint_1024_printBinHigh(acum, plen);
	printf("\n");
#endif

	return ap_uint_1024_pop_count(acum);
}



unsigned int computeDistance(ap_uint_1024 pattern,  int plen, ap_uint_1024 text,  int tlen)
{
	return shouji(pattern,  plen, text,  plen);
}


<%
#else 
// ENTRY_TYPE_2
%>


void xorBases(ap_uint_512 p, ap_uint_512 t, ap_uint_512p r)
{
<%
for (int i=0; i < 512/BASE_SIZE; i++)
{
	int dstidx = 512 - 1 -i;
	int srcidx0 = 512 - 1 -i*2;
	int srcidx1 = 512 - 2 -i*2;

	printf("\tint dst_%d = (", dstidx);
	inline_ap_uint_512_get_bit("p", srcidx0);
	printf(" ^ ");
	inline_ap_uint_512_get_bit("t", srcidx0);
	printf(") | (");
	inline_ap_uint_512_get_bit("p", srcidx1);
	printf(" ^ ");
	inline_ap_uint_512_get_bit("t", srcidx1);
	printf(") ;\n");

}

for (int i=0; i < (512/BASE_SIZE)/32; i++)
{
	int wordidx = 512/32 - 1 -i;
	printf("r->w%d = ", wordidx);

	for (int k=0; k < 32; k++)
	{
		int ref = wordidx * 32 + k;
		if (k>0) printf("|");
		printf("(dst_%d<<%d)", ref, k);
	}

	printf(";\n");
}
%>
}


unsigned int shouji(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	ap_uint_512 acum;
	ap_uint_512_zero(AP_UINT_PTR(acum));

#ifdef FPGA_DEBUG
	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		ap_uint_512 shifted_pattern;
		if (i < 0)
		{
			ap_uint_512_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_512_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_512_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}

		printf("shift [%2d] =", i);
		printSequence(shifted_pattern, plen);
		printf("\n");
	}


	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		ap_uint_512 shifted_pattern;
		if (i < 0)
		{
			ap_uint_512_shift_left(pattern, (-i)*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}
		else if (i==0)
		{
			ap_uint_512_set(AP_UINT_PTR(shifted_pattern), pattern);
		}
		else
		{
			// > 0
			ap_uint_512_shift_right(pattern, i*BASE_SIZE, AP_UINT_PTR(shifted_pattern));
		}

		printf("shift [%2d] =", i);
		ap_uint_512_printBinHigh(shifted_pattern, plen);
		printf("\n");

	}
#endif


<%
	for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++)
	{
		if (i < 0)
		{
			char* shifted_pattern_prefix = "shifted_pattern_m"; 
			char* dist_prefix = "dist_m"; 
%>
	ap_uint_512 <%printf("%s%d", shifted_pattern_prefix, -i);%>;
	ap_uint_512 <%printf("%s%d", dist_prefix, -i);%>;

	ap_uint_512_shift_left(pattern, (<%printf("%d",-i);%>)*BASE_SIZE, AP_UINT_PTR(<%printf("%s%d", shifted_pattern_prefix, -i);%>));
	xorBases(<%printf("%s%d", shifted_pattern_prefix, -i);%>, text, AP_UINT_PTR(<%printf("%s%d", dist_prefix, -i);%>));
			
<%		}
		else if (i==0)
		{
			char* shifted_pattern_prefix = "shifted_pattern_";
			char* dist_prefix = "dist_"; 
%>
	ap_uint_512 shifted_pattern_0;
	ap_uint_512 dist_0;

	ap_uint_512_set(AP_UINT_PTR(shifted_pattern_0), pattern);
	xorBases(shifted_pattern_0, text, AP_UINT_PTR(dist_0));
				
<%		}
		else
		{
			char* shifted_pattern_prefix = "shifted_pattern_p";
			char* dist_prefix = "dist_p"; 
%>
	ap_uint_512 <%printf("%s%d", shifted_pattern_prefix, i);%>;
	ap_uint_512 <%printf("%s%d", dist_prefix, i);%>;

	ap_uint_512_shift_right(pattern, <%printf("%d",i);%>*BASE_SIZE, AP_UINT_PTR(<%printf("%s%d", shifted_pattern_prefix, i);%>));
	xorBases(<%printf("%s%d", shifted_pattern_prefix, i);%>, text, AP_UINT_PTR(<%printf("%s%d", dist_prefix, i);%>));
				
<%		}
	}
%>




	<%
	for (int k=0; k < plen - SHOUJI_WINDOW_SIZE ; k++)
	//for (int k=0; k < 512/2 ; k++)
	{
	%>
	{
		unsigned int maxz = 0;
		int cb = 1;<%
		for (int i=-SHOUJI_THRESHOLD; i <= SHOUJI_THRESHOLD; i++){
		%>
		{<%
			//ap_uint_512 shifted_pattern;
			//ap_uint_512 dist;

			if (i < 0)
			{
				char* shifted_pattern_prefix = "shifted_pattern_m"; 
				char* dist_prefix = "dist_m"; 
			%>
			unsigned int xpart = ap_uint_512_range_high_32(<%printf("%s%d", dist_prefix, -i);%>, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE); <%}
			else if (i==0)
			{
				char* shifted_pattern_prefix = "shifted_pattern_";
				char* dist_prefix = "dist_"; 
			%>
			unsigned int xpart = ap_uint_512_range_high_32(dist_0, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE);<%}
			else
			{
				char* shifted_pattern_prefix = "shifted_pattern_p";
				char* dist_prefix = "dist_p"; 
			%>
			unsigned int xpart = ap_uint_512_range_high_32(<%printf("%s%d", dist_prefix, i);%>, <%printf("%d",k);%>, SHOUJI_WINDOW_SIZE);<%}	

#ifdef FPGA_DEBUG
			printf("shift [%2d] =", i);
			ap_uint_512_printBinHigh(dist, plen);
			printf("\n");

			printf("xpart (%d << %d) ", < % printf("%d",k); % >, i);
			printWordBin(xpart, SHOUJI_WINDOW_SIZE);
			printf("\n");
#endif

	%>
			unsigned int cz = countZeros(xpart, SHOUJI_WINDOW_SIZE); 
			int xpart_hb = (xpart >> (SHOUJI_WINDOW_SIZE-1)) & 0x1;

			if ((cz > maxz) || (cz == maxz && (xpart_hb==0)))
			{
				maxz = cz;
				cb = xpart_hb;
			}
		}
		<%}%>

		ap_uint_512_or_high_bit(AP_UINT_PTR(acum), <%printf("%d",k);%>, cb);
	}<%}%>

#ifdef FPGA_DEBUG
	printf("acum       =");
	ap_uint_512_printBinHigh(acum, plen);
	printf("\n");
#endif

	return ap_uint_512_pop_count(acum);
}

unsigned int computeDistance(ap_uint_512 pattern,  int plen, ap_uint_512 text,  int tlen)
{
	return shouji(pattern,  plen, text,  plen);
}

<%
#endif
%>


void printWordBin(unsigned int x, unsigned int size)
{
	for (int i=0; i < size; i++)
	{
		int v = (x >> size-1-i) & 0x1;
		printf("%d", v);
	}
}





unsigned int countZeros(unsigned int xpart, int size)
{
#if (SHOUJI_WINDOW_SIZE == 4)
	int b0 = (xpart >> 0) & 0x1;
	int b1 = (xpart >> 1) & 0x1;
	int b2 = (xpart >> 2) & 0x1;
	int b3 = (xpart >> 3) & 0x1;
	int nb0 = b0 ^ 0x1;
	int nb1 = b1 ^ 0x1;
	int nb2 = b2 ^ 0x1;
	int nb3 = b3 ^ 0x1;

	return nb0 + nb1 + nb2 + nb3;
#else
	#error We only support Shouji Window Size = 4 by now
#endif
}



